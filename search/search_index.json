{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Toonify API Welcome to the documentation for the Toonify API! We provide API access to the Toonification model made famous by Toonify Yourself and there will be more models to come in the future! The API is accessible through RapidAPI (who take care of all the authentication and billing for us). Please sign up for an API key there to try it out. If you have an API key take a look at our Getting Started tutorial . This is an early version of the API, more capabilities and models will be coming in the future. If you've got any feedback please create an issue on GitHub, or reach out to me on Twitter .","title":"Toonify API"},{"location":"#toonify-api","text":"Welcome to the documentation for the Toonify API! We provide API access to the Toonification model made famous by Toonify Yourself and there will be more models to come in the future! The API is accessible through RapidAPI (who take care of all the authentication and billing for us). Please sign up for an API key there to try it out. If you have an API key take a look at our Getting Started tutorial . This is an early version of the API, more capabilities and models will be coming in the future. If you've got any feedback please create an issue on GitHub, or reach out to me on Twitter .","title":"Toonify API"},{"location":"user-guide/getting-started/","text":"Note: There seems to be an issue with the RapidAPI interactive endpoint explorer not properly sending requests as multipart/form-data. Make sure you use this guide as your reference for testing the API as the code snippets generated by RapidAPI don't work First steps The following example uses the Python library Requests to send an image file for toonification. If the Accept header is application/json the response will be json, with images base64 encoded. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , } headers = { \"accept\" : \"application/json\" } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( response . json ()) will return a json response like this: { \"num_faces\" : 1 , \"b64_encoded_output\" : \"BASE64_IMAGE_HERE\" , \"b64_encoded_aligned\" : \"\" } Note When returning a json response all images are base64 encoded and returned as a string. Here's an example of how to read one of these into a PIL Image in Python: import base64 from io import BytesIO from PIL import Image b64_encoded_output = \"BASE64_IMAGE_HERE\" file_like = BytesIO ( base64 . b64decode ( b64_encoded_output )) image = Image . open ( file_like ) image . show () Returning an image If you want an image directly returned then set the Accept header to image/jpeg . Here is an example using curl for variety. curl -X POST \"https://toonify.p.rapidapi.com/v0/toonify\" -H \"accept: image/jpeg\" -H \"Content-Type: multipart/form-data\" -H \"x-rapidapi-host: toonify.p.rapidapi.com\" -H \"x-rapidapi-key: KEY_HERE\" -F \"image=@test.jpg;type=image/jpeg\" Indexing faces In the above example one of the json field is num_faces this tells you how many faces were detected in the original image. If there are multiple faces in the image then you can toonify all of them by passing an extra query parameter of face_index . This zero based index controls which detected face will be sent for toonifcation. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , \"face_index\" : 1 , } headers = { \"accept\" : \"application/json\" } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( response . json ()) Returning aligned image If you want to return the cropped and aligned face as well as the toonified result you can pass a query parameter of return_aligned=True . If the return type is json then the aligned face will be returned base64 encoded in the b64_encoded_aligned field. If the return type is an image then the two images will be horizontally concatenated and returned. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , \"face_index\" : 1 , \"return_aligned\" : \"true\" , } headers = { \"accept\" : \"image/jpeg\" } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( reponse . content ) #will be the jpeg image bytes","title":"Getting started"},{"location":"user-guide/getting-started/#first-steps","text":"The following example uses the Python library Requests to send an image file for toonification. If the Accept header is application/json the response will be json, with images base64 encoded. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , } headers = { \"accept\" : \"application/json\" } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( response . json ()) will return a json response like this: { \"num_faces\" : 1 , \"b64_encoded_output\" : \"BASE64_IMAGE_HERE\" , \"b64_encoded_aligned\" : \"\" } Note When returning a json response all images are base64 encoded and returned as a string. Here's an example of how to read one of these into a PIL Image in Python: import base64 from io import BytesIO from PIL import Image b64_encoded_output = \"BASE64_IMAGE_HERE\" file_like = BytesIO ( base64 . b64decode ( b64_encoded_output )) image = Image . open ( file_like ) image . show ()","title":"First steps"},{"location":"user-guide/getting-started/#returning-an-image","text":"If you want an image directly returned then set the Accept header to image/jpeg . Here is an example using curl for variety. curl -X POST \"https://toonify.p.rapidapi.com/v0/toonify\" -H \"accept: image/jpeg\" -H \"Content-Type: multipart/form-data\" -H \"x-rapidapi-host: toonify.p.rapidapi.com\" -H \"x-rapidapi-key: KEY_HERE\" -F \"image=@test.jpg;type=image/jpeg\"","title":"Returning an image"},{"location":"user-guide/getting-started/#indexing-faces","text":"In the above example one of the json field is num_faces this tells you how many faces were detected in the original image. If there are multiple faces in the image then you can toonify all of them by passing an extra query parameter of face_index . This zero based index controls which detected face will be sent for toonifcation. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , \"face_index\" : 1 , } headers = { \"accept\" : \"application/json\" } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( response . json ())","title":"Indexing faces"},{"location":"user-guide/getting-started/#returning-aligned-image","text":"If you want to return the cropped and aligned face as well as the toonified result you can pass a query parameter of return_aligned=True . If the return type is json then the aligned face will be returned base64 encoded in the b64_encoded_aligned field. If the return type is an image then the two images will be horizontally concatenated and returned. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , \"face_index\" : 1 , \"return_aligned\" : \"true\" , } headers = { \"accept\" : \"image/jpeg\" } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( reponse . content ) #will be the jpeg image bytes","title":"Returning aligned image"}]}